1.npm init -y
2.npm i -D nodemon
3.npm i express
4.npm i express-handlebars
5.src folder in which will be the main logic and the index.js file
6.in package.json : "start": "nodemon src/index.js 
7.in the main folder in the terminal : npm start
8.configuration of server and handlebars in index.js: 
        const express = require('express');
        const app = express();
        const handlebars = require('express-handlebars');
        const path = require('path');


        app.engine('handlebars', handlebars.engine());
        app.set('view engine', 'handlebars');
        app.set('views', path.join(__dirname, 'views')) // Creating folder inside src folder named 'views'

        // Inside views folder we create our first home.handlebar and type some h1 to see if it works with render function:
        app.get('/', (req, res) => {
            res.render('home', { layout: false });
        
        })


        app.listen(5000, () => {console.log('Server is listening on port 5000...')});


9.Creating static folder inside src and inside we put the img and css folders, and inside views we put all html folders
10.Inside index.js file we put this: app.use(express.static(path.join(__dirname, 'static'))); 
11.Inside the home.handlebars we remove all the unneccesarry part of the href so we remove the './static' part and the css and img should be visible
12.Render the pages using controllers: 
    -inside src we create routes.js
    -inside src create folder controllers and inside it we will create files for each page
    -for example we create homeControllers.js in which we render the /home page and visualize it
    -here is how the routes.js should look and what we want to stick with: 

                const router = require('express').Router();

                const homeController = require('./controllers/homeController');
                router.use(homeController);

                module.exports = router;

    - here is the homeControllers.js :
        	    const router = require('express').Router();

                router.get('/', (req, res) => {
                    res.render('home', { layout: false });
                
                }) 

                module.exports = router;

    -inside index.js we put these lines of code in order to connect all files: 
                const routes = require('./routes');
                app.use(routes);

13.Inside views we create folder layouts in which we create file main.handlebars 
    -in the main.handlebars we put all parts that will be the same in each page in this case headers main tag and footer and inside the main tag dont forget to put {{{body}}}
    -then we go in home.handlebars for example cut the above parts and leave only the needed section 
    -after this we can delete the {laout:false} inside the home render in homeController.js
    -we do this to render every page and 404 error page we render in routes.js after all controllers:
            router.use(homeController);
            router.use(createController);

            router.all('*', (req, res) => {
                res.render('404');
            })

14.Creating POST dynamic methods in this case for create.handlebars:
    -first we go to create.handlebars and in the form we change action, method and names field:
         - <form action="/create" method="POST".....name="something" and delete value=""
    -inside index.js after express.static(...) we put :
        app.use(express.urlencoded({extended: false})) // this gives us the values we typed in the create form and see them in the terminal console
    -if we do this inside createController.js we will see the info in the terminal after typing:
        router.post('/create', (req, res) => {
            console.log(req.body); ///THIS I MEAN
            res.send('hehe')
        });
    -we should have a place to save and handle the new information we got from the .urlencoded so we will implement this new bussines logic inside new folder:
        -inside src we create services folder and inside it movieServise.js
        -inside movieServise.js: 
                const movies = []; // HERE WE STORE ALL INFOS ABOUT THE MOVIE WE JUST TYPED AND LATER WE WIIL SEE HOW TO MAKE THEM VISIBLE IN THE HOME PAGE ONE BY ONE AND NOT HARDCODED LIKE IN THE BEGINNING
                    //ALSO here with every restart of the server we lost all the info in the movies's list so later we will see how to deal with that
                exports.create = (movieData) => {
                    movies.push(movieData)
                    console.log(movies)
                }
        -inside createController.js:
                router.post('/create', (req, res) => {
                const newMovie = req.body;
                movieService.create(newMovie)
                res.redirect('/')
                }) //GREAT but now we want to dynamically show the movies insde the home page so here are the next steps:

                    -inside home.handlebars we have initially 3 movies but we need the template for only one so we delete 2 of them and then we do this:
                        
                        <section id="catalog">
                            <h1>All Movies</h1>
                            <div class="band">

                                <!-- If there are posts for creature in the database display each of them -->
                                <div class="flip flip-vertical">
                                    <div class="front">
                                        <img src="{{imageURL}}"
                                            alt="Jungle-Cruise">
                                    </div>
                                    <div class="back">
                                        <h1>{{title}}</h1>
                                        <h2>Genre: {{genre}}</h2>
                                        <p>Description: {{description}}</p>
                                        <a href="#" class="details">Details</a>
                                    </div>
                                </div>

                                
                                <!-- If there are still no posts in the database display: -->
                                <!-- <div class="no-posts">
                                    <p class="no-offer">There are no posts yet...</p>
                                </div> -->
                            </div>
                        </section>

                    -then in homeController.js:
                        const movieService = require('../services/movieService');

                        router.get('/', (req, res) => {
                            const movies  = movieService.getAll();
                            res.render('home', {movies});
                        
                        });
                    -in movieService.js we create the getAll():
                        exports.getAll = () => {
                            return movies.slice();}
                    
                    -in home.handlebars we add the #each so it goes for every movie dynamically:
                            
                        <section id="catalog">
                            <h1>All Movies</h1>
                            <div class="band">

                                {{#each movies}}
                                    <div class="flip flip-vertical">
                                        <div class="front">
                                            <img src="{{imageURL}}"
                                                alt="{{title}}">
                                        </div>
                                        <div class="back">
                                            <h1>{{title}}</h1>
                                            <h2>Genre: {{genre}}</h2>
                                            <p>Description: {{description}}</p>
                                            <a href="#" class="details">Details</a>
                                        </div>
                                    </div>
                                {{else}}
                                    <div class="no-posts">
                                        <p class="no-offer">There are no posts yet...</p>
                                    </div> 
                                {{/each}}

                            </div>
                        </section>
       
                
15.Create details page
    -inside movieService.js:
        const movies = [
            {   _id: 1,
                title: 'vbdbd',
                genre: '',
                director: '',
                year: '',
                imageURL: '',
                rating: '',
                description: ''
            }
        ];
        exports.create = (movieData) => {
            movieData._id = movies[movies.length - 1]._id +  1 //Creating movie._id cause we need unique identity of each movie
            movies.push(movieData)
    
            }

    -inside home.handlebars we put the href to the details page:
         <a href="/details/{{_id}}" class="details">Details</a>

    -inside createController.js: 
        router.get('/details/:movieId', (req, res) => {
            res.render('details');
        });
    -Now we have to do dynamically the details page in the following way:
        -inside details.handlebars:
            <section id="details-page">

                <div class="main_card">
                    <div class="card_left">
                        <div class="card_datails">

                            <h1>{{movie.title}}</h1>
                            <div class="card-movie">
                                <div class="first-info">
                                    <p class="card-genre">Genre: {{movie.genre}}</p>
                                    <p class="card-director">Directror: {{movie.director}}</p>
                                </div>
                                <div class="second-info">
                                    <p class="card-year">Year: {{movie.year}}</p>
                                    <p class="card-ranking">Rating: <span id="stars">&#x2605; &#x2605; &#x2605;
                                            &#x2605;</span></p>
                                </div>

                            </div>

                            <p class="disc">Description: {{movie.description}}</p>
                        </div>
                    </div>
                    <div class="card_right">
                        <img src="{{movie.imageURL}}"
                            alt="image">
                    </div>
                </div>

            </section>

        -inside createController.js :
            router.get('/details/:movieId', (req, res) => {
                const movieId = req.params.movieId;
                const movie = movieService.getOne(movieId);
                res.render('details', {movie});
            });
        -inside movieService.js:
            exports.getOne = (movieId) => {
                return movies.find(movie => movie._id == movieId);
            }

16.MONGODB AND MONGOOSE PART 2 OF THE WORKSHOP:
    -npm install mongoose
    -inside index.js:
        const mongoose = require('mongoose');
        mongoose.connect(`mongodb://localhost:27017/magic-movies`) //magic-movies is the name of the database
            .then(() => {console.log(`DB Connected`)});

    -creating models:
        -create folder models and inside it create Movie.js where we will create the schema for the movies we want to create;
        -inside Movie.js:
            const mongoose = require('mongoose');

            const movieSchema = new mongoose.Schema( {
                title: {
                    type: String,
                    required: true,
                },
                genre: {
                    type: String,
                    required: true,
                },
                director: {
                    type: String,
                    required: true,
                },
                year: {
                    type: Number,
                    required: true,
                    min: 1900,
                    max: 2030,
                },
                rating: {
                    type: Number,
                    required: true,
                    min: 1,
                    max: 5,
                }, 
                description: {
                    type: String,
                    required: true,
                    maxLength: 1000,
                },
                imageURL: {
                    type: String,
                    required: true,
                    match: /^https?/,
                },

            
            })

            const Movie = mongoose.model('Movie', movieSchema); //Movie is the name of the model with which we will create our movies and mongoose will create this collection by itself as its plural form 'movies' 

            module.exports = Movie;
    
    -next step is to save our movies using mongodb:
        -inside createController:
            router.post('/create', async (req, res) => {
                const newMovie = req.body;
                try {
                    await movieService.create(newMovie);
                    res.redirect('/')
                } catch(err) {
                    console.log(err.message);
                    res.redirect('/create')
                }
                
            });
        -inside movieService:
            exports.create = async (movieData) => {
                const result = await Movie.create(movieData);
                return result;
                
            }






