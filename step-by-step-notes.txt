1.npm init -y
2.npm i -D nodemon
3.npm i express
4.npm i express-handlebars
5.src folder in which will be the main logic and the index.js file
6.in package.json : "start": "nodemon src/index.js 
7.in the main folder in the terminal : npm start
8.configuration of server and handlebars in index.js: 
        const express = require('express');
        const app = express();
        const handlebars = require('express-handlebars');
        const path = require('path');


        app.engine('handlebars', handlebars.engine());
        app.set('view engine', 'handlebars');
        app.set('views', path.join(__dirname, 'views')) // Creating folder inside src folder named 'views'

        // Inside views folder we create our first home.handlebar and type some h1 to see if it works with render function:
        app.get('/', (req, res) => {
            res.render('home', { layout: false });
        
        })


        app.listen(5000, () => {console.log('Server is listening on port 5000...')});


9.Creating static folder inside src and inside we put the img and css folders, and inside views we put all html folders
10.Inside index.js file we put this: app.use(express.static(path.join(__dirname, 'static'))); 
11.Inside the home.handlebars we remove all the unneccesarry part of the href so we remove the './static' part and the css and img should be visible
12.Render the pages using controllers: 
    -inside src we create routes.js
    -inside src create folder controllers and inside it we will create files for each page
    -for example we create homeControllers.js in which we render the /home page and visualize it
    -here is how the routes.js should look and what we want to stick with: 

                const router = require('express').Router();

                const homeController = require('./controllers/homeController');
                router.use(homeController);

                module.exports = router;

    - here is the homeControllers.js :
        	    const router = require('express').Router();

                router.get('/', (req, res) => {
                    res.render('home', { layout: false });
                
                }) 

                module.exports = router;

    -inside index.js we put these lines of code in order to connect all files: 
                const routes = require('./routes');
                app.use(routes);

13.Inside views we create folder layouts in which we create file main.handlebars 
    -in the main.handlebars we put all parts that will be the same in each page in this case headers main tag and footer and inside the main tag dont forget to put {{{body}}}
    -then we go in home.handlebars for example cut the above parts and leave only the needed section 
    -after this we can delete the {laout:false} inside the home render in homeController.js
    -we do this to render every page and 404 error page we render in routes.js after all controllers:
            router.use(homeController);
            router.use(createController);

            router.all('*', (req, res) => {
                res.render('404');
            })

14.Creating POST dynamic methods in this case for create.handlebars:
    -first we go to create.handlebars and in the form we change action, method and names field:
         - <form action="/create" method="POST".....name="something" and delete value=""
    -inside index.js after express.static(...) we put :
        app.use(express.urlencoded({extended: false})) // this gives us the values we typed in the create form and see them in the terminal console
    -if we do this inside createController.js we will see the info in the terminal after typing:
        router.post('/create', (req, res) => {
            console.log(req.body); ///THIS I MEAN
            res.send('hehe')
        });
    -we should have a place to save and handle the new information we got from the .urlencoded so we will implement this new bussines logic inside new folder:
        -inside src we create services folder and inside it movieServise.js
        -inside movieServise.js: 
                const movies = []; // HERE WE STORE ALL INFOS ABOUT THE MOVIE WE JUST TYPED AND LATER WE WIIL SEE HOW TO MAKE THEM VISIBLE IN THE HOME PAGE ONE BY ONE AND NOT HARDCODED LIKE IN THE BEGINNING
                    //ALSO here with every restart of the server we lost all the info in the movies's list so later we will see how to deal with that
                exports.create = (movieData) => {
                    movies.push(movieData)
                    console.log(movies)
                }
        -inside createController.js:
                router.post('/create', (req, res) => {
                const newMovie = req.body;
                movieService.create(newMovie)
                res.redirect('/')
                }) //GREAT but now we want to dynamically show the movies insde the home page so here are the next steps:

                    -inside home.handlebars we have initially 3 movies but we need the template for only one so we delete 2 of them and then we do this:
                        
                        <section id="catalog">
                            <h1>All Movies</h1>
                            <div class="band">

                                <!-- If there are posts for creature in the database display each of them -->
                                <div class="flip flip-vertical">
                                    <div class="front">
                                        <img src="{{imageURL}}"
                                            alt="Jungle-Cruise">
                                    </div>
                                    <div class="back">
                                        <h1>{{title}}</h1>
                                        <h2>Genre: {{genre}}</h2>
                                        <p>Description: {{description}}</p>
                                        <a href="#" class="details">Details</a>
                                    </div>
                                </div>

                                
                                <!-- If there are still no posts in the database display: -->
                                <!-- <div class="no-posts">
                                    <p class="no-offer">There are no posts yet...</p>
                                </div> -->
                            </div>
                        </section>

                    -then in homeController.js:
                        const movieService = require('../services/movieService');

                        router.get('/', (req, res) => {
                            const movies  = movieService.getAll();
                            res.render('home', {movies});
                        
                        });
                    -in movieService.js we create the getAll():
                        exports.getAll = () => {
                            return movies.slice();}
                    
                    -in home.handlebars we add the #each so it goes for every movie dynamically:
                            
                        <section id="catalog">
                            <h1>All Movies</h1>
                            <div class="band">

                                {{#each movies}}
                                    <div class="flip flip-vertical">
                                        <div class="front">
                                            <img src="{{imageURL}}"
                                                alt="{{title}}">
                                        </div>
                                        <div class="back">
                                            <h1>{{title}}</h1>
                                            <h2>Genre: {{genre}}</h2>
                                            <p>Description: {{description}}</p>
                                            <a href="#" class="details">Details</a>
                                        </div>
                                    </div>
                                {{else}}
                                    <div class="no-posts">
                                        <p class="no-offer">There are no posts yet...</p>
                                    </div> 
                                {{/each}}

                            </div>
                        </section>
       
                
15.Create details page
    -inside movieService.js:
        const movies = [
            {   _id: 1,
                title: 'vbdbd',
                genre: '',
                director: '',
                year: '',
                imageURL: '',
                rating: '',
                description: ''
            }
        ];
        exports.create = (movieData) => {
            movieData._id = movies[movies.length - 1]._id +  1 //Creating movie._id cause we need unique identity of each movie
            movies.push(movieData)
    
            }

    -inside home.handlebars we put the href to the details page:
         <a href="/details/{{_id}}" class="details">Details</a>

    -inside createController.js: 
        router.get('/details/:movieId', (req, res) => {
            res.render('details');
        });
    -Now we have to do dynamically the details page in the following way:
        -inside details.handlebars:
            <section id="details-page">

                <div class="main_card">
                    <div class="card_left">
                        <div class="card_datails">

                            <h1>{{movie.title}}</h1>
                            <div class="card-movie">
                                <div class="first-info">
                                    <p class="card-genre">Genre: {{movie.genre}}</p>
                                    <p class="card-director">Directror: {{movie.director}}</p>
                                </div>
                                <div class="second-info">
                                    <p class="card-year">Year: {{movie.year}}</p>
                                    <p class="card-ranking">Rating: <span id="stars">&#x2605; &#x2605; &#x2605;
                                            &#x2605;</span></p>
                                </div>

                            </div>

                            <p class="disc">Description: {{movie.description}}</p>
                        </div>
                    </div>
                    <div class="card_right">
                        <img src="{{movie.imageURL}}"
                            alt="image">
                    </div>
                </div>

            </section>

        -inside createController.js :
            router.get('/details/:movieId', (req, res) => {
                const movieId = req.params.movieId;
                const movie = movieService.getOne(movieId);
                res.render('details', {movie});
            });
        -inside movieService.js:
            exports.getOne = (movieId) => {
                return movies.find(movie => movie._id == movieId);
            }

16.MONGODB AND MONGOOSE PART 2 OF THE WORKSHOP:
    -npm install mongoose
    -inside index.js:
        const mongoose = require('mongoose');
        mongoose.connect(`mongodb://localhost:27017/magic-movies`) //magic-movies is the name of the database
            .then(() => {console.log(`DB Connected`)});

    -creating models:
        -create folder models and inside it create Movie.js where we will create the schema for the movies we want to create;
        -inside Movie.js:
            const mongoose = require('mongoose');

            const movieSchema = new mongoose.Schema( {
                title: {
                    type: String,
                    required: true,
                },
                genre: {
                    type: String,
                    required: true,
                },
                director: {
                    type: String,
                    required: true,
                },
                year: {
                    type: Number,
                    required: true,
                    min: 1900,
                    max: 2030,
                },
                rating: {
                    type: Number,
                    required: true,
                    min: 1,
                    max: 5,
                }, 
                description: {
                    type: String,
                    required: true,
                    maxLength: 1000,
                },
                imageURL: {
                    type: String,
                    required: true,
                    match: /^https?/,
                },

            
            })

            const Movie = mongoose.model('Movie', movieSchema); //Movie is the name of the model with which we will create our movies and mongoose will create this collection by itself as its plural form 'movies' 

            module.exports = Movie;
    
    -next step is to save our movies using mongodb:
        -inside createController:
            router.post('/create', async (req, res) => {
                const newMovie = req.body;
                try {
                    await movieService.create(newMovie);
                    res.redirect('/')
                } catch(err) {
                    console.log(err.message);
                    res.redirect('/create')
                }
                
            });
        -inside movieService:
            exports.create = async (movieData) => {
                const result = await Movie.create(movieData);
                return result;
                
            }

        -now we have to get the exsiting daTA from the database and actually display it on home page:
            -in movieService:
                exports.getAll =  () => Movie.find();
                exports.create = (movieData) => Movie.create(movieData); 
            
            -in homeController:
                router.get('/', async (req, res) => {
                    const movies  = await movieService.getAll().lean(); //wihtout lean its a document and we need it as objects so thats why we use lean()
                    res.render('home', {movies});
                
                });
        -lets remove everything we dont need to start working only with the database and movieService should look like this now:
            const Movie = require('../models/Movie')

            exports.getOne = (movieId) =>  Movie.findById(movieId);
            exports.getAll =  () => Movie.find();
            exports.create = (movieData) => Movie.create(movieData); 

        -lets also fix the getOne() inside createController:
            router.get('/details/:movieId', async (req, res) => {
                const movieId = req.params.movieId;
                const movie = await movieService.getOne(movieId).lean();
                res.render('details', {movie});
            });

17.Lets create new pages:
-first is the /create/cast page:
    -we create castController.js inside controllers
    -inside it :
        const router = require('express').Router();

        router.get('/create/cast', (req, res) => {
            res.render('cast-create') //DO ALL STEPS FOR THE cast-create.handlebars (deleting header and footer and if needed adding something in layout main in this case in nav we add create post li)
        })

        module.exports = router;
    DONT FORGET TO ADD IN routes.js: 
        const castController = require('./controllers/castController');
        router.use(castController);

-now lets see how to actually post casts:
    -fix our handlebar in this case fix the form how its been given in the word file with the right name values:
        
            <section id="create-cast">
                <div class="createCastSection">
                    <div class="info-cast">
                        <h2>"You're gonna need a bigger boat." — "Jaws," 1975.</h2>
                    </div>

                    <form action="/create/cast" method="POST" class="createCastForm">
                        <h2>Add Cast</h2>
                        <ul class="noBullet">
                            <li>
                                <label for="name">Name:</label>
                                <input type="text" class="inputFields" id="name" name="name" />
                            </li>
                            <li>
                                <label for="age">Age:</label>
                                <input type="number" class="inputFields" id="age" name="age" />
                            </li>
                            <li>
                                <label for="born">Born:</label>
                                <input type="text" class="inputFields" id="born" name="born"/>
                            </li>
                            <li>
                                <label for="name-in-movie">Name in Movie:</label>
                                <input type="text" class="inputFields" id="name-in-movie" name="nameInMovie"/>
                            </li>
                            <li>
                                <label for="image">Cast Image:</label>
                                <input type="text" class="inputFields" id="image" name="castImage" />
                            </li>
                            <li id="center-btn">
                                <button id="create-btn">Add Cast</button>
                            </li>
                        </ul>
                    </form>

                </div>
            </section>

    -now we create castServise in the service folder just like we did in the movieService the logic is the same
    -also create Cast.js in models folder to create our model for the cats:
        const mongoose = require('mongoose');

        const castSchema = mongoose.Schema({
            name: {
                type: String,
                required: true,
            },
            age: {
                type: Number,
                required: true,
                min: 14,
                max: 120,
            },
            born: {
                type: String,
                required: true,
            },
            nameInMovie: {
                type: String,
                required: true,
            },
            castImage: {
                type: String,
                required: true,
                match: /^https?/,
            },

        });


        const Cast = mongoose.model('Cast', castSchema);

        module.exports = Cast;

    -inside castServise.js:
        const Cast = requrie('../models/Cast');

        exports.create = (castData) => Cast.create(castData);
    -inside castController:
        const castService = require('../services/castService');

        router.post('/create/cast', async (req, res) => {
            const castData = req.body;
            await castService.create(castData)

            res.redirect('/')
        });

18.Lets create attach page
-delete anything unneccesarry in cast-attach.handlebar(header and footer)
-now we go in createController.js:
   
    router.get('/details/:movieId', async (req, res) => {
        const movieId = req.params.movieId;
        const movie = await movieService.getOne(movieId).lean();
        res.render('details', {movie});
    });


-then we go to the home.handlebars to add the attach button right next to the details one and do this to add the path:
    <a href="/details/{{_id}}" class="details">Details</a>
    <a href="/attach/{{_id}}" class="details">Attach</a>

-then in cast-attach.handlebars we change things correctly: 
    
            <section id="attachCast">
                <div class="attachCastSection">
                <h1>Attach New Cast</h1>
                <div class="attach-form">
                    <h2>{{movie.title}}</h2>
                    <img class="movie" src="{{movie.imageURL}}">
                    <form action="" method="">
                        <label for="cast">Cast</label>
                        <select id="cast" name="cast">
                        <option value="none" selected>--------</option>
                        <option value="Cast 1">Cast 1</option>
                        <option value="Cast 2">Cast 2</option>
                        <option value="Cast 3">Cast 3</option>
                        <option value="Cast 4">Cast 4</option>
                        <option value="Cast 5">Cast 5</option>
                        </select>
                        <div id="center-btn">
                            <button id="create-btn">Add Cast</button>
                        </div>
                    </form>
                </div>
            </div>
            </section>

-lets attach from all casts we have : 
    -inside castService:
        exports.getAll = () => Cast.find()
    -inside createController:
        router.get('/attach/:movieId', async (req, res) => {
            const movieId = req.params.movieId;
            const movie = await movieService.getOne(movieId).lean();
            const casts = await castService.getAll().lean();
            res.render('cast-attach', {...movie, casts});
        });
    -inside cast-attach.handlebars:
        
            <section id="attachCast">
                <div class="attachCastSection">
                <h1>Attach New Cast</h1>
                <div class="attach-form">
                    <h2>{{title}}</h2>
                    <img class="movie" src="{{imageURL}}">
                    <form action="" method="">
                        <label for="cast">Cast</label>
                        <select id="cast" name="cast">
                            <option value="none" selected>--------</option>
                            {{#each casts}}
                                <option value="{{_id}}">{{name}}</option>
                            {{/each}}
                        </select>
                        <div id="center-btn">
                            <button id="create-btn">Add Cast</button>
                        </div>
                    </form>
                </div>
            </div>
            </section>
    -NEXT STEP IS TO CONNEXT THE CAST TO THE MOVIE WITH THE BUTTON ADD CAST SO GETTING A POST METHOD:
        -fixing the cast-attach.handlebars form:
          <form action="/attach/{{_id}}" method="POST">
        
        -then we go in Movie.js to add aditional property to the model:
            casts: [{
                type: mongoose.Types.ObjectId,
                ref: 'Cast',
            }],
        -then inside createController.js we create the post method:
            router.post('/attach/:movieId', async (req, res) => {
            const castId = req.body.cast;
            const movie = await movieService.getOne(req.params.movieId);
            movie.casts.push(castId);
            await movie.save();
            res.redirect(`/attach/${req.params.movieId}`)
            
        })

    -next step is to update the details page with the cast:
        -Inside details.handlebars:
             <section id="details-page">

                <div class="main_card">
                    <div class="card_left">
                        <div class="card_datails">

                            <h1>{{movie.title}}</h1>
                            <div class="card-movie">
                                <div class="first-info">
                                    <p class="card-genre">Genre: {{movie.genre}}</p>
                                    <p class="card-director">Directror: {{movie.director}}</p>
                                </div>
                                <div class="second-info">
                                    <p class="card-year">Year: {{movie.year}}</p>
                                    <p class="card-ranking">Rating: <span id="stars">&#x2605; &#x2605; &#x2605;
                                            &#x2605;</span></p>
                                </div>

                            </div>

                            <p class="disc">Description: {{movie.description}}</p>
                        </div>
                    </div>
                    <div class="card_right">
                        <img src="{{movie.imageURL}}"
                            alt="image">
                    </div>
                </div>

                <div class="main-cast-card">
                    {{#each movie.casts}}
                    <div class="cast-card">
                        <div class="card-img">
                            <img src="{{castImage}}"
                                alt="cast">
                        </div>
                        <div class="cast-info">
                            <h1>{{name}}</h1>
                            <h3>Age: {{age}}</h3>
                            <h3>Born: {{born}}</h3>
                            <h3>Name in Movie: {{nameInMovie}}</h3>
                        </div>
                    </div>
                    {{/each}}
                    
                </div>

            </section>

    -INSIDE movieService.js:
        exports.getOne = (movieId) =>  Movie.findById(movieId).populate('casts'); !!!!!!!!!!!!!!!!!!!!!!!!


17.PART 3 OF THE WORKSHOP: Session and authentication
-first we add the new resources
-the main.handlebars nav should look like this now because of the new pages we will add:
       <nav>
            <img src="/img/logo.webp" alt="logo">

            <ul class="menu">
                <li><a href="/">Home</a></li>
                <li><a href="/about">About</a></li>
                <li><a href="/search">Search</a></li>
                <!--Users-->
                <li><a href="/create">Create Post</a></li>
                <li><a href="/create/cast">Create Cast</a></li>
                <li><a href="/logout">Logout</a></li>
                <!--Guest-->
                <li><a href="/login">Login</a></li>
                <li><a href="/register">Register</a></li>
            </ul>

        </nav>

-now lets do everything we need to first implement the register.html so we do everything we already did with the other hmtl pages

-then we create new controller for authorization pages: login, logout, register, called: authController.js:
    const router = require('express').Router();

    router.get('/register', (req, res) => {
        res.render('register')
    })

    module.exports = router;
-inside routes.js dont forget: 
    const authController = require('./controllers/authController');
    router.use(authController);

-now lets fix the form in register.handlebars:
    
            <section id="register-page">
                <div class="registerSection">
                    <div class="info-register">
                        <h2>"I hope you're pleased with yourselves. We could all have been killed — or worse, expelled. Now if you don't mind, I'm going to bed."</h2>
                    </div>
                    <form action="/register" method="POST" class="registerForm">
                        <h2>Register</h2>
                        <ul class="noBullet">
                            <li>
                                <label for="email">Email:</label>
                                <input type="text" class="inputFields" id="email" name="email"/>
                            </li>
                            <li>
                                <label for="password">Password:</label>
                                <input type="password" class="inputFields" id="password" name="password"/>
                            </li>
                            <li>
                                <label for="repeat-password">Repeat-Password:</label>
                                <input type="password" class="inputFields" id="repeat-password" name="rePassword"/>
                            </li>
                            <li id="center-btn">
                                <button id="join-btn">Register</button>
                            </li>
                        </ul>
                    </form>
                </div>
            </section>

-inside authController lets make the post tag:
    router.post('/register', (req, res) => {
    const userData = req.body
})
-now of course lets make the service for that: authService.js but first we need model to create each user so we also create User.js:
    const mongoose = require('mongoose');

    const userSchema = new mongoose.Schema( {
        email: {
            type: String,
            required: true,\
            unique: true,
        },
        password: {
            type: String,
            required: true,
        },
    })

    const User = mongoose.model('User', userSchema);

    module.exports = User;

-inside authService.js:
    const User = require('../models/User');

    exposts.register = (userData) => User.create(userData);

-inside authController:
const authService = require('../services/authService');

router.post('/register', async (req, res) => {
    const userData = req.body;
    await authService.register(userData);
    res.redirect('/login')

})
18.NOW LETS HASH THE PASSWORD:
    -install bcrypt
    -inside User.js:
    const bcrypt = require('bcrypt');
    userSchema.pre('save', async function() { //PRE MEANS before saving the model here we hash the password
        const hash = await bcrypt.hash(this.password, 12);
        
        this.password = hash;
    });
    -now we wanna validate the rePassword again in User.js:
        userSchema.virtual('rePassword')
            .set(function(value) {
                if(value !== this.password) {
                    throw new Error('Password missmatch !')
                }
            });




19.Now lets implement login page:
<section id="login-page">

                <div class="loginSection">
                    <div class="info">
                        <h2>"My mama always said life was like a box of chocolates. You never know what you're gonna get."</h2>
                    </div>
                    <form action="/login" method="POST" class="loginForm">
                        <h2>Login</h2>
                        <ul class="noBullet">
                            <li>
                                <label for="email">Email:</label>
                                <input type="text" class="inputFields" id="email" name="email"/>
                            </li>
                            <li>
                                <label for="password">Password:</label>
                                <input type="password" class="inputFields" id="password" name="password" />
                            </li>

                            <li id="center-btn">
                                <button id="login-btn">Login</button>
                            </li>
                        </ul>
                    </form>
                </div>

            </section>


-inside authController:
    router.post('/login', async (req, res) => {
    const {email, password} = req.body;
    await authService.login(email, password);
});


-inside authService lets create our login function and dont forget to install npm i jsonwebtoken:

        const bcrypt = require('bcrypt');
        const jwt = require('../lib/jwt');
        const  SECRET = 'jikhfljmlk;w;fj56fsefef'

        exports.register = (userData) => User.create(userData);
        exports.login = async (email, password) => {

            //Get user from db
            const user = await User.findOne({email});

            //Check if user exists
            if (!user) {
                throw new Error('Cannot find username or password');
            }
            //Check if password is valid
            const isValid = await bcrypt.compare(password, user.password);
            if(!isValid) {
                throw new Error('Cannot find username or password')

            }
            //Generate jwt token: dont forget to npm i jsonwebtoken! //THIS WE DO IN SEPARATE FOLDER lib inside jwt.js
            const payload = {
                _id: user._id,
                email:user.email,
            };

            const token = await jwt.sign(payload, SECRET)
            //return token
            return token;
        }
    -inside jwt.js:
        
        const jwt = require('jsonwebtoken');

        function sign(payload, secretOrPrivateKey, options = {}) {
            const promise = new Promise((resolve, reject) => {
                jwt.sign(payload, secretOrPrivateKey, options, (err, token) => {
                    if (err) {
                        return reject(err);
                    }

                    resolve(token);
                })
            });

            return promise;
        }


        module.exports = {
            sign,
        
        };
-inside authController:
    
    router.post('/login', async (req, res) => {
        const {email, password} = req.body;
        const token = await authService.login(email, password); //IN THE NEXT STEPS WE WILL SEE HOW TO CONTINUE THIS
        
        res.redirect('/')
    });

-next step is to install npm i cookie-parser
-inside index.js: 
    const cookieParser = require('cookie-parser');
    app.use(cookieParser());

-then again in authController:
    
    router.post('/login', async (req, res) => {
        const {email, password} = req.body;
        const token = await authService.login(email, password);
        res.cookie('auth', token); // THIS WE UPDATED
        
        res.redirect('/')
    });
19.NOW LETS MAKE THE AUTHORIZATION OR IN OTHER WORDS LETS UPDATE THE DETAILS PAGE WITH THE NEW BUTTONS
    -add the two new buttons to the details page:
         <section id="details-page">

                <div class="main_card">
                    <div class="card_left">
                        <div class="card_datails">

                            <h1>{{movie.title}}</h1>
                            <div class="card-movie">
                                <div class="first-info">
                                    <p class="card-genre">Genre: {{movie.genre}}</p>
                                    <p class="card-director">Directror: {{movie.director}}</p>
                                </div>
                                <div class="second-info">
                                    <p class="card-year">Year: {{movie.year}}</p>
                                    <p class="card-ranking">Rating: <span id="stars">&#x2605; &#x2605; &#x2605;
                                            &#x2605;</span></p>
                                </div>

                            </div>

                            <p class="disc">Description: {{movie.description}}</p>
                        </div>
                        <div class="details-btn">
                            <a href="/edit/{{movie._id}}" id="edit-button">Edit</a>
                            <a href="/delete/{{movie._id}}" id="delete-button">Delete</a> //WE CHANGE FROM BUTTON TO a SO WE USE IT AS A FORM
                        </div>
                    </div>
                    <div class="card_right">
                        <img src="{{movie.imageURL}}"
                            alt="image">
                    </div>
                </div>

                <div class="main-cast-card">
                    {{#each movie.casts}}
                    <div class="cast-card">
                        <div class="card-img">
                            <img src="{{castImage}}"
                                alt="cast">
                        </div>
                        <div class="cast-info">
                            <h1>{{name}}</h1>
                            <h3>Age: {{age}}</h3>
                            <h3>Born: {{born}}</h3>
                            <h3>Name in Movie: {{nameInMovie}}</h3>
                        </div>
                    </div>
                    {{/each}}
                    
                </div>

            </section>





-then inside edit.handlebars:
    

            <section id="edit-page">
                <div class="editSection">
                    <div class="info-edit">
                        <h2>"One ring to rule them all, one ring to find them, one ring to bring them all and in the darkness bind them."</h2>
                    </div>

                    <form method="POST" class="editForm">
                        <h2>Edit Post</h2>
                        <ul class="noBullet">
                            <li>
                                <label for="title">Title:</label>
                                <input type="text" class="inputFields" id="title" name="title" value="{{movie.title}}" />
                            </li>
                            <li>
                                <label for="genre">Genre:</label>
                                <input type="text" class="inputFields" id="genre" name="genre" value="{{movie.genre}}" />
                            </li>
                            <li>
                                <label for="director">Director:</label>
                                <input type="text" class="inputFields" id="director" name="director" value="{{movie.director}}" />
                            </li>
                            <li>
                                <label for="date">Year:</label>
                                <input type="number" class="inputFields" id="year" name="year" value="{{movie.year}}" />
                            </li>
                            <li>
                                <label for="image">Movie Poster:</label>
                                <input type="text" class="inputFields" id="image" name="imageURL" value="{{movie.imageURL}}" />
                            </li>
                            <li>
                                <label for="image">Rating:</label>
                                <input type="text" class="inputFields" id="rating" name="rating" value="{{movie.rating}}" />
                            </li>
                            <li>
                                <label for="description">Description:</label>
                                <textarea id="description" class="inputFields" name="description">{{movie.description}}</textarea>
                            </li>
                            <li id="center-btn">
                                <button id="edit-btn">Edit</button>
                            </li>
                        </ul>
                    </form>

                </div>
            </section>

 -inside createController:
    
    router.get('/edit/:movieId', async (req, res) => {
        const movie =  await movieService.getOne(req.params.movieId).lean();
        res.render('edit', {movie})
    });

-   NOW LETS MAKE AUTHORIZATION: 
    create new folder middlewares and inside it lets create authMiddleware.js 
    -its created to validate the token of the people who are logged in
    -inside index.js:
        const {auth} = require('../middlewares/authMiddleware');

        app.use(auth);
    -inside jwt.js: //THIS IS TO CREATE PROMISES FOR THE jwt's methods
        const util = require('util');
        const jwt = require('jsonwebtoken');

        function sign(payload, secretOrPrivateKey, options = {}) {
            const promise = new Promise((resolve, reject) => {
                jwt.sign(payload, secretOrPrivateKey, options, (err, token) => {
                    if (err) {
                        return reject(err);
                    }

                    resolve(token);
                })
            });

            return promise;
        }

        const verify = util.promisify(jwt.verify); // thats the new thing

        module.exports = {
            sign,
            verify,
        };
    
    -inside config folder we put the secret:
        module.exports = {
            SECRET: 'ad89fnkj4nifkasd89f34uj4naw534289u74'
        }
    -inside authService and authMiddleware we import it like this: const { SECRET } = require('../config/config');
    -inside authMiddleware:
    const jwt = require('../lib/jwt');
    const { SECRET } = require('../config/config');


    exports.auth = async (req, res, next) => {
        //get token
        const token = req.cookies['auth'];

        if (!token) {
            return next(); //the case where you are a guest and not logged
        }

        try {
            const decodedToken = await jwt.verify(token, SECRET);

            req.user = decodedToken;
            

            next();
        } catch {
            res.clearCookie('auth');

            res.redirect('/login');
        }
    }

    -inside createController:
        router.get('/edit/:movieId', async (req, res) => {
            if(!req.user) {
                return res.redirect('/login')
            }
            const movie =  await movieService.getOne(req.params.movieId).lean();
            res.render('edit', {movie})
        });





